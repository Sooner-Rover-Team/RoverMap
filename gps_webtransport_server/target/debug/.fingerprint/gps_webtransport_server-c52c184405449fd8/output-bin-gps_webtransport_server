{"$message_type":"diagnostic","message":"the trait bound `PathBuf: s2n_quic::provider::tls::Provider` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":501,"byte_end":510,"line_start":15,"line_end":15,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"        .with_tls(cert_path, key_path)?","highlight_start":19,"highlight_end":28}],"label":"the trait `s2n_quic::provider::tls::Provider` is not implemented for `PathBuf`, which is required by `s2n_quic::server::Builder<impl ServerProviders>: s2n_quic::provider::tls::With<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":492,"byte_end":500,"line_start":15,"line_end":15,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"        .with_tls(cert_path, key_path)?","highlight_start":10,"highlight_end":18}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `s2n_quic::provider::tls::Provider`:\n  &[u8]\n  &std::path::Path\n  &str\n  (&[u8], &[u8])\n  (&std::path::Path, &std::path::Path)\n  (&str, &str)\n  s2n_quic::provider::tls::Default\n  s2n_quic::provider::tls::default::Client\n  s2n_quic::provider::tls::default::Server","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `s2n_quic::server::Builder<impl ServerProviders>` to implement `s2n_quic::provider::tls::With<PathBuf>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `s2n_quic::server::Builder::<Providers>::with_tls`","code":null,"level":"note","spans":[{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/builder.rs","byte_start":10340,"byte_end":10348,"line_start":333,"line_end":333,"column_start":9,"column_end":17,"is_primary":false,"text":[{"text":"        with_tls,","highlight_start":9,"highlight_end":17}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/provider/macros.rs","byte_start":5233,"byte_end":5279,"line_start":182,"line_end":182,"column_start":23,"column_end":69,"is_primary":true,"text":[{"text":"                Self: $field::With<T::Provider, Output = Builder<U>>,","highlight_start":23,"highlight_end":69}],"label":"required by this bound in `Builder::<Providers>::with_tls`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/builder.rs","byte_start":8923,"byte_end":10392,"line_start":292,"line_end":336,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    impl_provider_method!(","highlight_start":5,"highlight_end":27},{"text":"        /// Sets the TLS provider for the [`Server`]","highlight_start":1,"highlight_end":53},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// # Examples","highlight_start":1,"highlight_end":23},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// The default TLS provider and configuration will be used with the","highlight_start":1,"highlight_end":77},{"text":"        /// path to the private key.","highlight_start":1,"highlight_end":37},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// ```rust,no_run","highlight_start":1,"highlight_end":27},{"text":"        /// # use std::{error::Error, path::Path};","highlight_start":1,"highlight_end":51},{"text":"        /// # use s2n_quic::Server;","highlight_start":1,"highlight_end":36},{"text":"        /// #","highlight_start":1,"highlight_end":14},{"text":"        /// # #[tokio::main]","highlight_start":1,"highlight_end":29},{"text":"        /// # async fn main() -> Result<(), Box<dyn Error>> {","highlight_start":1,"highlight_end":62},{"text":"        /// let server = Server::builder()","highlight_start":1,"highlight_end":43},{"text":"        ///     .with_tls((Path::new(\"./certs/cert.pem\"), Path::new(\"./certs/key.pem\")))?","highlight_start":1,"highlight_end":90},{"text":"        ///     .start()?;","highlight_start":1,"highlight_end":27},{"text":"        /// #","highlight_start":1,"highlight_end":14},{"text":"        /// #    Ok(())","highlight_start":1,"highlight_end":24},{"text":"        /// # }","highlight_start":1,"highlight_end":16},{"text":"        /// ```","highlight_start":1,"highlight_end":16},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// Sets the TLS provider to a TLS server builder","highlight_start":1,"highlight_end":58},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// ```rust,ignore","highlight_start":1,"highlight_end":27},{"text":"        /// # use std::{error::Error, path::Path};","highlight_start":1,"highlight_end":51},{"text":"        /// # use s2n_quic::Server;","highlight_start":1,"highlight_end":36},{"text":"        /// #","highlight_start":1,"highlight_end":14},{"text":"        /// # #[tokio::main]","highlight_start":1,"highlight_end":29},{"text":"        /// # async fn main() -> Result<(), Box<dyn Error>> {","highlight_start":1,"highlight_end":62},{"text":"        /// let tls = s2n_tls::Server::builder()","highlight_start":1,"highlight_end":49},{"text":"        ///     .with_certificate(Path::new(\"./certs/cert.pem\"), Path::new(\"./certs/key.pem\"))?","highlight_start":1,"highlight_end":96},{"text":"        ///     .with_security_policy(s2n::tls::security_policy::S2N_20190802)?;","highlight_start":1,"highlight_end":81},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// let server = Server::builder()","highlight_start":1,"highlight_end":43},{"text":"        ///     .with_tls(tls)?","highlight_start":1,"highlight_end":32},{"text":"        ///     .start()?;","highlight_start":1,"highlight_end":27},{"text":"        /// #","highlight_start":1,"highlight_end":14},{"text":"        /// #    Ok(())","highlight_start":1,"highlight_end":24},{"text":"        /// # }","highlight_start":1,"highlight_end":16},{"text":"        /// ```","highlight_start":1,"highlight_end":16},{"text":"        with_tls,","highlight_start":1,"highlight_end":18},{"text":"        tls,","highlight_start":1,"highlight_end":13},{"text":"        ServerProviders","highlight_start":1,"highlight_end":24},{"text":"    );","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_provider_method!","def_site_span":{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/provider/macros.rs","byte_start":4884,"byte_end":4917,"line_start":173,"line_end":173,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! impl_provider_method {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `PathBuf: s2n_quic::provider::tls::Provider` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:15:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .with_tls(cert_path, key_path)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `s2n_quic::provider::tls::Provider` is not implemented for `PathBuf`, which is required by `s2n_quic::server::Builder<impl ServerProviders>: s2n_quic::provider::tls::With<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `s2n_quic::provider::tls::Provider`:\u001b[0m\n\u001b[0m              &[u8]\u001b[0m\n\u001b[0m              &std::path::Path\u001b[0m\n\u001b[0m              &str\u001b[0m\n\u001b[0m              (&[u8], &[u8])\u001b[0m\n\u001b[0m              (&std::path::Path, &std::path::Path)\u001b[0m\n\u001b[0m              (&str, &str)\u001b[0m\n\u001b[0m              s2n_quic::provider::tls::Default\u001b[0m\n\u001b[0m              s2n_quic::provider::tls::default::Client\u001b[0m\n\u001b[0m              s2n_quic::provider::tls::default::Server\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `s2n_quic::server::Builder<impl ServerProviders>` to implement `s2n_quic::provider::tls::With<PathBuf>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `s2n_quic::server::Builder::<Providers>::with_tls`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/builder.rs:292:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m292\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl_provider_method!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// Sets the TLS provider for the [`Server`]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// # Examples\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        with_tls,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tls,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ServerProviders\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Builder::<Providers>::with_tls`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_provider_method` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this method takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":512,"byte_end":520,"line_start":15,"line_end":15,"column_start":30,"column_end":38,"is_primary":false,"text":[{"text":"        .with_tls(cert_path, key_path)?","highlight_start":30,"highlight_end":38}],"label":"unexpected argument #2 of type `PathBuf`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":492,"byte_end":500,"line_start":15,"line_end":15,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .with_tls(cert_path, key_path)?","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/builder.rs","byte_start":10340,"byte_end":10348,"line_start":333,"line_end":333,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        with_tls,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":510,"byte_end":520,"line_start":15,"line_end":15,"column_start":28,"column_end":38,"is_primary":true,"text":[{"text":"        .with_tls(cert_path, key_path)?","highlight_start":28,"highlight_end":38}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:15:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .with_tls(cert_path, key_path)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2 of type `PathBuf`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/builder.rs:333:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        with_tls,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        .with_tls(cert_path\u001b[0m\u001b[0m\u001b[38;5;9m, key_path\u001b[0m\u001b[0m)?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        .with_tls(cert_path)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `with_io` exists for struct `Builder<Providers<..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":465,"byte_end":532,"line_start":14,"line_end":16,"column_start":22,"column_end":10,"is_primary":false,"text":[{"text":"    let mut server = Server::builder()","highlight_start":22,"highlight_end":39},{"text":"        .with_tls(cert_path, key_path)?","highlight_start":1,"highlight_end":40},{"text":"        .with_io(\"0.0.0.0:4433\")?","highlight_start":1,"highlight_end":10}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":532,"byte_end":539,"line_start":16,"line_end":16,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .with_io(\"0.0.0.0:4433\")?","highlight_start":10,"highlight_end":17}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/logan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/path.rs","byte_start":38846,"byte_end":38864,"line_start":1158,"line_end":1158,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct PathBuf {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `PathBuf: s2n_quic::provider::tls::Provider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/provider/macros.rs","byte_start":1357,"byte_end":1393,"line_start":55,"line_end":55,"column_start":9,"column_end":45,"is_primary":false,"text":[{"text":"        pub struct Providers<$($field_ty,)*> {","highlight_start":9,"highlight_end":45}],"label":"doesn't satisfy `_: ServerProviders`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/providers.rs","byte_start":274,"byte_end":1006,"line_start":9,"line_end":33,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl_providers_state! {","highlight_start":1,"highlight_end":1},{"text":"    #[derive(Debug, Default)]","highlight_start":1,"highlight_end":1},{"text":"    struct Providers {","highlight_start":1,"highlight_end":1},{"text":"        congestion_controller: CongestionController,","highlight_start":1,"highlight_end":1},{"text":"        connection_close_formatter: ConnectionCloseFormatter,","highlight_start":1,"highlight_end":1},{"text":"        connection_id: ConnectionID,","highlight_start":1,"highlight_end":1},{"text":"        packet_interceptor: PacketInterceptor,","highlight_start":1,"highlight_end":1},{"text":"        stateless_reset_token: StatelessResetToken,","highlight_start":1,"highlight_end":1},{"text":"        random: Random,","highlight_start":1,"highlight_end":1},{"text":"        endpoint_limits: EndpointLimits,","highlight_start":1,"highlight_end":1},{"text":"        event: Event,","highlight_start":1,"highlight_end":1},{"text":"        limits: Limits,","highlight_start":1,"highlight_end":1},{"text":"        mtu: Mtu,","highlight_start":1,"highlight_end":1},{"text":"        io: IO,","highlight_start":1,"highlight_end":1},{"text":"        path_migration: PathMigration,","highlight_start":1,"highlight_end":1},{"text":"        sync: Sync,","highlight_start":1,"highlight_end":1},{"text":"        tls: Tls,","highlight_start":1,"highlight_end":1},{"text":"        address_token: AddressToken,","highlight_start":1,"highlight_end":1},{"text":"        datagram: Datagram,","highlight_start":1,"highlight_end":1},{"text":"        dc: Dc,","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Opaque trait containing all of the configured providers","highlight_start":1,"highlight_end":1},{"text":"    trait ServerProviders {}","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_providers_state!","def_site_span":{"file_name":"/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/provider/macros.rs","byte_start":905,"byte_end":938,"line_start":33,"line_end":33,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! impl_providers_state {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the full type name has been written to '/Users/logan/RoverMap/gps_webtransport_server/target/debug/deps/gps_webtransport_server-c52c184405449fd8.long-type-3549937885369055489.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`PathBuf: s2n_quic::provider::tls::Provider`\nwhich is required by `s2n_quic::server::Providers<<impl ServerProviders as ServerProviders>::CongestionController, <impl ServerProviders as ServerProviders>::ConnectionCloseFormatter, <impl ServerProviders as ServerProviders>::ConnectionID, <impl ServerProviders as ServerProviders>::PacketInterceptor, <impl ServerProviders as ServerProviders>::StatelessResetToken, <impl ServerProviders as ServerProviders>::Random, <impl ServerProviders as ServerProviders>::EndpointLimits, <impl ServerProviders as ServerProviders>::Event, <impl ServerProviders as ServerProviders>::Limits, <impl ServerProviders as ServerProviders>::Mtu, <impl ServerProviders as ServerProviders>::IO, <impl ServerProviders as ServerProviders>::PathMigration, <impl ServerProviders as ServerProviders>::Sync, PathBuf, <impl ServerProviders as ServerProviders>::AddressToken, <impl ServerProviders as ServerProviders>::Datagram, <impl ServerProviders as ServerProviders>::Dc>: ServerProviders`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `with_io` exists for struct `Builder<Providers<..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m    let mut server = Server::builder()\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m______________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .with_tls(cert_path, key_path)?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .with_io(\"0.0.0.0:4433\")?\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/logan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/path.rs:1158:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0mpub struct PathBuf {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `PathBuf: s2n_quic::provider::tls::Provider`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/logan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/s2n-quic-1.58.0/src/server/providers.rs:9:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m  \u001b[0m\u001b[0mimpl_providers_state! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    #[derive(Debug, Default)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    struct Providers {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m        congestion_controller: CongestionController,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    trait ServerProviders {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: ServerProviders`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/logan/RoverMap/gps_webtransport_server/target/debug/deps/gps_webtransport_server-c52c184405449fd8.long-type-3549937885369055489.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m             `PathBuf: s2n_quic::provider::tls::Provider`\u001b[0m\n\u001b[0m             which is required by `s2n_quic::server::Providers<<impl ServerProviders as ServerProviders>::CongestionController, <impl ServerProviders as ServerProviders>::ConnectionCloseFormatter, <impl ServerProviders as ServerProviders>::ConnectionID, <impl ServerProviders as ServerProviders>::PacketInterceptor, <impl ServerProviders as ServerProviders>::StatelessResetToken, <impl ServerProviders as ServerProviders>::Random, <impl ServerProviders as ServerProviders>::EndpointLimits, <impl ServerProviders as ServerProviders>::Event, <impl ServerProviders as ServerProviders>::Limits, <impl ServerProviders as ServerProviders>::Mtu, <impl ServerProviders as ServerProviders>::IO, <impl ServerProviders as ServerProviders>::PathMigration, <impl ServerProviders as ServerProviders>::Sync, PathBuf, <impl ServerProviders as ServerProviders>::AddressToken, <impl ServerProviders as ServerProviders>::Datagram, <impl ServerProviders as ServerProviders>::Dc>: ServerProviders`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
